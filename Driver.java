import java.util.List;

// Class for testing the implemented class
public class Driver {
    public static void main(String[] args) {
        inputValidationTest();
        duplicateRouteAddTest();
        testWithDifferentImportance();
        testAtSourceCity();
        testAtTwoLocationProvided();
        trainAndFlightOnSameRoute();
    }
    
    // printing the shortest path if it is not null
    // if it is null then print no path found
    private static void printPath(List<String> shortestPath) {

        if (shortestPath != null) {
            System.out.println(shortestPath);
            System.out.println();
        } else {
            System.out.println("No path found");
        }
    }

    // testing for the train and flight with same route
    private static void trainAndFlightOnSameRoute() {
        TravelAssistant travelAssistant = new TravelAssistant();
        travelAssistant.addCity("A", false, -1, 200);
        travelAssistant.addCity("C", false, 1, 300);

        travelAssistant.addFlight("A", "C", 1, 10);
        travelAssistant.addTrain("A", "C", 10, 1);

        // while cost and are important.
        printPath(travelAssistant.planTrip("A", "C", false, 1, 0, 1));

        // while time and hope are important.
        printPath(travelAssistant.planTrip("A", "C", false, 0, 1, 1));
    }

    // testing when two location is provided
    private static void testAtTwoLocationProvided() {
        TravelAssistant travelAssistant = new TravelAssistant();
        travelAssistant.addCity("A", false, -1, 0);
        travelAssistant.addCity("B", false, 3, 10);
        travelAssistant.addCity("C", false, 2, 10);
        travelAssistant.addCity("D", false, 0, 0);
        travelAssistant.addCity("E", true, -1, 0);

        travelAssistant.addFlight("A", "C", 1, 20);
        travelAssistant.addFlight("A", "B", 1, 10);

        travelAssistant.addTrain("B", "C", 1, 1);
        travelAssistant.addTrain("B", "D", 1, 1);

        travelAssistant.addTrain("C", "D", 1, 1);

        travelAssistant.addFlight("D", "E", 1, 2);

        // While traversing graph, there 2 cities who is providing test, system will
        // pick city with minimum night cost * timeToTest
        printPath(travelAssistant.planTrip("A", "E", false, 1, 0, 0));
    }

    // testing with two different importancw
    private static void testWithDifferentImportance() {
        TravelAssistant travelAssistant = new TravelAssistant();
        travelAssistant.addCity("A", false, -1, 0);
        travelAssistant.addCity("B", false, 2, 4);
        travelAssistant.addCity("C", false, 1, 1);
        travelAssistant.addCity("D", true, 0, 0);

        travelAssistant.addFlight("A", "B", 1, 2);
        travelAssistant.addFlight("A", "C", 1, 5);
        travelAssistant.addFlight("A", "D", 100, 100);

        travelAssistant.addFlight("B", "D", 1, 1);

        travelAssistant.addTrain("C", "D", 10, 1);

        // Cost is the only priority to plan trip
        printPath(travelAssistant.planTrip("A", "D", false, 1, 0, 0));

        // time is the only priority to plan trip
        printPath(travelAssistant.planTrip("A", "D", false, 0, 1, 0));

        // Hop is the only priority to plan trip
        printPath(travelAssistant.planTrip("A", "D", true, 0, 0, 1));
    }

    // testing with test being provided at source city
    private static void testAtSourceCity() {
        TravelAssistant travelAssistant = new TravelAssistant();
        travelAssistant.addCity("A", false, 1, 10);
        travelAssistant.addCity("B", false, -1, 0);
        travelAssistant.addCity("C", false, 1, 1);
        travelAssistant.addCity("D", true, 0, 0);

        travelAssistant.addFlight("A", "B", 3, 1);
        travelAssistant.addFlight("A", "C", 1, 5);
        travelAssistant.addTrain("B", "D", 3, 2);
        travelAssistant.addFlight("C", "D", 1, 3);

        // For vaccinated and unvaccinated path are same, even though hotel night cost
        // at city A is very high compare to city C. But still minimum path generated by
        // doing testing at City A same bacause Source is providing a test.
        printPath(travelAssistant.planTrip("A", "D", false, 1, 0, 0));
        printPath(travelAssistant.planTrip("A", "D", true, 1, 0, 0));
    }

    // testing with duplicate route
    private static void duplicateRouteAddTest() {
        TravelAssistant travelAssistant = new TravelAssistant();
        travelAssistant.addCity("A", true, 1, 2);
        travelAssistant.addCity("B", true, 1, 3);
        travelAssistant.addCity("C", true, 1, 4);

        travelAssistant.addFlight("A", "B", 2, 2);
        travelAssistant.addFlight("A", "C", 8, 10);
        travelAssistant.addTrain("A", "B", 8, 6);
        travelAssistant.addTrain("A", "C", 8, 10);

        travelAssistant.addFlight("B", "C", 4, 6);
        travelAssistant.addTrain("B", "C", 2, 6);

        // Already know routes.
        travelAssistant.addFlight("A", "B", 8, 6);
        travelAssistant.addFlight("A", "C", 8, 10);
        travelAssistant.addFlight("B", "C", 2, 6);

        // plan trip for unvaccinated.
        printPath(travelAssistant.planTrip("A", "C", false, 1, 1, 1));

        // plan trip for vaccinted
        printPath(travelAssistant.planTrip("A", "C", true, 1, 1, 1));

        // plan trip only with time importance
        printPath(travelAssistant.planTrip("A", "C", true, 0, 1, 0));

        // plan trip only with hop importance
        printPath(travelAssistant.planTrip("A", "C", false, 0, 0, 1));

        // Route should not found for below both the trip
        printPath(travelAssistant.planTrip("C", "A", false, 1, 2, 2));
        printPath(travelAssistant.planTrip("B", "A", false, 1, 2, 2));

    }

    // testing with input validation test
    private static void inputValidationTest() {
        TravelAssistant travelAssistant = new TravelAssistant();
        travelAssistant.addCity("A", true, 2, 2);
        travelAssistant.addCity("A", true, 2, 2);
        travelAssistant.addCity("B", false, -1, 0);
        travelAssistant.addCity("C", true, 1, 2);
        try {
            travelAssistant.addCity(null, true, 1, 2);
        } catch(IllegalArgumentException e) {
            System.out.println("Exception test : " + e.getMessage());
        }

        travelAssistant.addFlight("A", "B", 2, 2);
        travelAssistant.addFlight("B", "C", 4, 6);
        travelAssistant.addTrain("A", "C", 8, 10);
        travelAssistant.addTrain("A", "B", 1, 10);

        printPath(travelAssistant.planTrip("A", "C", true, 1, 2, 2));
        printPath(travelAssistant.planTrip("A", "C", false, 0, 1, 0));
        printPath(travelAssistant.planTrip("A", "B", false, 1, 2, 2));
        printPath(travelAssistant.planTrip("C", "B", false, 1, 2, 2));
    }
}
